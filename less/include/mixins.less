.clear() {
    &:before,
    &:after {
        display: table;
        content: "";
    }
    &:after {
        clear: both;
    }
}

.user-select(@mode: none) {
    user-select: @mode;
}

.box-sizing(@model: border-box) {
    box-sizing: @model;
}

.px2rem(@attr: width; @size: 16; @unit: rem) {
    .get-values(length(@size));
    .get-values(@s, @i: 1) when (@i =< length(@size)) {
        @current_value: extract(@size, @i);

        & when not(@current_value = 0) {
                @{attr}+_: unit( @current_value / 16, @unit );
        }

        & when (@current_value = 0) {
                @{attr}+_: 0;
        }

        .get-values(@s, @i + 1);
    }
}

.rem2px(@attr: width; @size: 16; @unit: px) {
    .get-values(length(@size));
    .get-values(@s, @i: 1) when (@i =< length(@size)) {
        @current_value: extract(@size, @i);

        & when not(@current_value = 0) {
                @{attr}+_: unit( 16 * @current_value, @unit );
        }

        & when (@current_value = 0) {
                @{attr}+_: 0;
        }

        .get-values(@s, @i + 1);
    }
}

.pt2px(@attr: width; @size: 16; @unit: px) {
    .get-values(length(@size));
    .get-values(@s, @i: 1) when (@i =< length(@size)) {
        @current_value: extract(@size, @i);

        & when not(@current_value = 0) {
                @{attr}+_: unit( round(@current_value * 1.333333) , @unit );
        }

        & when (@current_value = 0) {
                @{attr}+_: 0;
        }

        .get-values(@s, @i + 1);
    }
}

.px2pt(@attr: width; @size: 16; @unit: pt) {
    .get-values(length(@size));
    .get-values(@s, @i: 1) when (@i =< length(@size)) {
        @current_value: extract(@size, @i);

        & when not(@current_value = 0) {
                @{attr}+_: unit( round(.75 * @current_value), @unit );
        }

        & when (@current_value = 0) {
                @{attr}+_: 0;
        }

        .get-values(@s, @i + 1);
    }
}

.pt2rem(@attr: width; @size: 16; @unit: rem){
    .get-values(length(@size));
    .get-values(@s, @i: 1) when (@i =< length(@size)) {
        @current_value: extract(@size, @i);

        & when not(@current_value = 0) {
                @{attr}+_: unit( round(@current_value * 1.333333 / 16), @unit );
        }

        & when (@current_value = 0) {
                @{attr}+_: 0;
        }

        .get-values(@s, @i + 1);
    }
}

.rem2pt(@attr: width; @size: 16; @unit: pt){
    .get-values(length(@size));
    .get-values(@s, @i: 1) when (@i =< length(@size)) {
        @current_value: extract(@size, @i);

        & when not(@current_value = 0) {
                @{attr}+_: unit( round(.75 * 16 * @current_value), @unit );
        }

        & when (@current_value = 0) {
                @{attr}+_: 0;
        }

        .get-values(@s, @i + 1);
    }
}

.align(@mode) {
    text-align: @mode;
}

.flash-list() {
    margin: 0;
    padding: 0;
    list-style: none inside;
    width: 100%;
    height: 100%;
}

.perspective(@perspective) {
    transform: perspective(@perspective);
}
.rotate(@degrees) {
    transform: rotate(@degrees);
}
.rotateX(@degrees) {
    transform: rotateX(@degrees);
}
.rotateY(@degrees) {
    transform: rotateY(@degrees);
}
.rotateZ(@degrees) {
    transform: rotateZ(@degrees);
}
.scale(@ratio) {
    transform: scale(@ratio);
}
.scaleX(@ratio) {
    transform: scaleX(@ratio);
}
.scaleY(@ratio) {
    transform: scaleY(@ratio);
}
.translate(@x: 0, @y: 0) {
    transform: translate(@x, @y);
}
.translateX(@x: 0) {
    transform: translateX(@x);
}
.translateY(@y: 0) {
    transform: translateY(@y);
}
.skew(@x: 0, @y: 0) {
    transform: skew(@x, @y);
}
.translate3d(@x: 0, @y: 0, @z: 0) {
    transform: translate(@x, @y, @z);
}

.transformOrigin(@origin) {
    transform-origin: @origin;
}

.transition(@target: all, @time: 1s, @func: ease){
    transition: @target @time @func;
}

.box(@size: 16px) {
    width: @size;
    height: @size;
}

.square(@size: 16px) {
    width: @size;
    height: @size;
}

.rect(@width, @height) {
    width: @width;
    height: @height;
}

.circle(@size){
    .box(@size);
    border-radius: 50%;
}

.fix-to-top() {
    position: fixed;
    right: 0;
    left: 0;
    bottom: auto;
    top: 0;
}

.fix-to-bottom() {
    position: fixed;
    right: 0;
    left: 0;
    bottom: 0;
    top: auto;
}

.shadow(@size) when (@size = 0) {
    box-shadow: none;
    border: 1px solid #eee;
}

.shadow(@size) when (@size = 1) {
    box-shadow: 0 2px 10px 0 rgba(0, 0, 0, 0.16), 0 2px 5px 0 rgba(0, 0, 0, 0.26);
}

.shadow(@size) when (@size = 2) {
    box-shadow: 0 6px 20px 0 rgba(0, 0, 0, 0.19), 0 8px 17px 0 rgba(0, 0, 0, 0.2);
}

.shadow(@size) when (@size = 3) {
    box-shadow: 0 17px 50px 0 rgba(0, 0, 0, 0.19), 0 12px 15px 0 rgba(0, 0, 0, 0.24);
}

.shadow(@size) when (@size = 4) {
    box-shadow: 0 25px 55px 0 rgba(0, 0, 0, 0.21), 0 16px 28px 0 rgba(0, 0, 0, 0.22);
}

.shadow(@size) when (@size = 5) {
    box-shadow: 0 40px 77px 0 rgba(0, 0, 0, 0.22), 0 27px 24px 0 rgba(0, 0, 0, 0.2);
}

.generate-indent(@size, @i: 1) when (@i =< @indentIndexLength) {
    @size: extract(@indentIndexes, @i);
    @indentID: @size / 8;

    * .padding@{indentID} {padding: unit(@size, px);}
    * .margin@{indentID} {margin: unit(@size, px);}

    .generate-indent(@size, @i + 1);
}